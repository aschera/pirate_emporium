.row{
    max-width:$grid-width; //standard. max-widths adapats if the screen viewport is smaller so it fills 100% of available space.
    
        /* -------------MEDIA Queries -----------------*/
        //  600 - 900 ?
        @include respond(tab-p) {
            max-width: 50rem;
            padding: 0 1rem;
        }

    margin: 0 auto; //trick to center block elements inside another block element. 
    
    &:not(:last-child){  // everything except the last child
        margin-bottom:$gutter-vertical; // white space between rows
        
        /* -------------MEDIA Queries -----------------*/
        //  600 - 900 ?
        @include respond(tab-p) {
            margin-bottom: $gutter-vertical-small;
        }
    }

    @include clearfix;

    [class^="col-"] { // selects all where class attributes starts with col-
        float:left;

        &:not(:last-child){
            margin-right: $gutter-horizontal;

            /* -------------MEDIA Queries -----------------*/
            //  600 - 900 ?
            @include respond(tab-p) {
                margin-right: 0; 
                margin-bottom: $gutter-vertical-small;
            }
        }

        /* -------------MEDIA Queries -----------------*/
        //  600 - 900 ?
        @include respond(tab-p) {
            width: 100% !important;
        }
    }
    
    .col-1-of-2{
        width: calc((100% - #{$gutter-horizontal}) / 2); // 100 is the entire row. gutter-horizontal is the space between the cols.
    }

    .col-1-of-3{
        width: calc((100% - (2 * #{$gutter-horizontal})) / 3);
    }

    .col-2-of-3{
        width: calc(( 2 * (100% - (2 * #{$gutter-horizontal})) / 3) + #{$gutter-horizontal});
    }

    .col-1-of-4{
        width: calc((100% - (3 * #{$gutter-horizontal})) / 4);
    }

    .col-2-of-4{
        width: calc(( 2 * (100% - (3 * #{$gutter-horizontal})) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4{
        width: calc(
        (3 * (100% - (3 * #{$gutter-horizontal})) / 4) + 2 * #{$gutter-horizontal});
    }
}
